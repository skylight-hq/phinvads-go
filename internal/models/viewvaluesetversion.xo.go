package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
)

// ViewValueSetVersion represents a row from 'public.view_value_set_version'.
type ViewValueSetVersion struct {
	Viewversionid     string `json:"viewversionid"`     // viewversionid
	Valuesetversionid string `json:"valuesetversionid"` // valuesetversionid
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [ViewValueSetVersion] exists in the database.
func (vvsv *ViewValueSetVersion) Exists() bool {
	return vvsv._exists
}

// Deleted returns true when the [ViewValueSetVersion] has been marked for deletion
// from the database.
func (vvsv *ViewValueSetVersion) Deleted() bool {
	return vvsv._deleted
}

// Insert inserts the [ViewValueSetVersion] to the database.
func (vvsv *ViewValueSetVersion) Insert(ctx context.Context, db DB) error {
	switch {
	case vvsv._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case vvsv._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO public.view_value_set_version (` +
		`viewversionid, valuesetversionid` +
		`) VALUES (` +
		`$1, $2` +
		`)`
	// run
	logf(sqlstr, vvsv.Viewversionid, vvsv.Valuesetversionid)
	if _, err := db.ExecContext(ctx, sqlstr, vvsv.Viewversionid, vvsv.Valuesetversionid); err != nil {
		return logerror(err)
	}
	// set exists
	vvsv._exists = true
	return nil
}

// ------ NOTE: Update statements omitted due to lack of fields other than primary key ------

// Delete deletes the [ViewValueSetVersion] from the database.
func (vvsv *ViewValueSetVersion) Delete(ctx context.Context, db DB) error {
	switch {
	case !vvsv._exists: // doesn't exist
		return nil
	case vvsv._deleted: // deleted
		return nil
	}
	// delete with composite primary key
	const sqlstr = `DELETE FROM public.view_value_set_version ` +
		`WHERE viewversionid = $1 AND valuesetversionid = $2`
	// run
	logf(sqlstr, vvsv.Viewversionid, vvsv.Valuesetversionid)
	if _, err := db.ExecContext(ctx, sqlstr, vvsv.Viewversionid, vvsv.Valuesetversionid); err != nil {
		return logerror(err)
	}
	// set deleted
	vvsv._deleted = true
	return nil
}

// ViewValueSetVersionByViewversionidValuesetversionid retrieves a row from 'public.view_value_set_version' as a [ViewValueSetVersion].
//
// Generated from index 'view_value_set_version_pkey'.
func ViewValueSetVersionByViewversionidValuesetversionid(ctx context.Context, db DB, viewversionid, valuesetversionid string) (*ViewValueSetVersion, error) {
	// query
	const sqlstr = `SELECT ` +
		`viewversionid, valuesetversionid ` +
		`FROM public.view_value_set_version ` +
		`WHERE viewversionid = $1 AND valuesetversionid = $2`
	// run
	logf(sqlstr, viewversionid, valuesetversionid)
	vvsv := ViewValueSetVersion{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, viewversionid, valuesetversionid).Scan(&vvsv.Viewversionid, &vvsv.Valuesetversionid); err != nil {
		return nil, logerror(err)
	}
	return &vvsv, nil
}

// ValueSetVersion returns the ValueSetVersion associated with the [ViewValueSetVersion]'s (Valuesetversionid).
//
// Generated from foreign key 'view_value_set_version_valuesetversionid_fkey'.
func (vvsv *ViewValueSetVersion) ValueSetVersion(ctx context.Context, db DB) (*ValueSetVersion, error) {
	return ValueSetVersionByID(ctx, db, vvsv.Valuesetversionid)
}

// ViewVersion returns the ViewVersion associated with the [ViewValueSetVersion]'s (Viewversionid).
//
// Generated from foreign key 'view_value_set_version_viewversionid_fkey'.
func (vvsv *ViewValueSetVersion) ViewVersion(ctx context.Context, db DB) (*ViewVersion, error) {
	return ViewVersionByID(ctx, db, vvsv.Viewversionid)
}
