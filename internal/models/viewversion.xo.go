package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
)

// ViewVersion represents a row from 'public.view_version'.
type ViewVersion struct {
	ID            string         `json:"id"`            // id
	Viewid        sql.NullString `json:"viewid"`        // viewid
	Versionnumber sql.NullInt64  `json:"versionnumber"` // versionnumber
	Reason        sql.NullString `json:"reason"`        // reason
	Status        sql.NullString `json:"status"`        // status
	Statusdate    sql.NullTime   `json:"statusdate"`    // statusdate
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [ViewVersion] exists in the database.
func (vv *ViewVersion) Exists() bool {
	return vv._exists
}

// Deleted returns true when the [ViewVersion] has been marked for deletion
// from the database.
func (vv *ViewVersion) Deleted() bool {
	return vv._deleted
}

// Insert inserts the [ViewVersion] to the database.
func (vv *ViewVersion) Insert(ctx context.Context, db DB) error {
	switch {
	case vv._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case vv._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO public.view_version (` +
		`id, viewid, versionnumber, reason, status, statusdate` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`)`
	// run
	logf(sqlstr, vv.ID, vv.Viewid, vv.Versionnumber, vv.Reason, vv.Status, vv.Statusdate)
	if _, err := db.ExecContext(ctx, sqlstr, vv.ID, vv.Viewid, vv.Versionnumber, vv.Reason, vv.Status, vv.Statusdate); err != nil {
		return logerror(err)
	}
	// set exists
	vv._exists = true
	return nil
}

// Update updates a [ViewVersion] in the database.
func (vv *ViewVersion) Update(ctx context.Context, db DB) error {
	switch {
	case !vv._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case vv._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.view_version SET ` +
		`viewid = $1, versionnumber = $2, reason = $3, status = $4, statusdate = $5 ` +
		`WHERE id = $6`
	// run
	logf(sqlstr, vv.Viewid, vv.Versionnumber, vv.Reason, vv.Status, vv.Statusdate, vv.ID)
	if _, err := db.ExecContext(ctx, sqlstr, vv.Viewid, vv.Versionnumber, vv.Reason, vv.Status, vv.Statusdate, vv.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [ViewVersion] to the database.
func (vv *ViewVersion) Save(ctx context.Context, db DB) error {
	if vv.Exists() {
		return vv.Update(ctx, db)
	}
	return vv.Insert(ctx, db)
}

// Upsert performs an upsert for [ViewVersion].
func (vv *ViewVersion) Upsert(ctx context.Context, db DB) error {
	switch {
	case vv._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.view_version (` +
		`id, viewid, versionnumber, reason, status, statusdate` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`viewid = EXCLUDED.viewid, versionnumber = EXCLUDED.versionnumber, reason = EXCLUDED.reason, status = EXCLUDED.status, statusdate = EXCLUDED.statusdate `
	// run
	logf(sqlstr, vv.ID, vv.Viewid, vv.Versionnumber, vv.Reason, vv.Status, vv.Statusdate)
	if _, err := db.ExecContext(ctx, sqlstr, vv.ID, vv.Viewid, vv.Versionnumber, vv.Reason, vv.Status, vv.Statusdate); err != nil {
		return logerror(err)
	}
	// set exists
	vv._exists = true
	return nil
}

// Delete deletes the [ViewVersion] from the database.
func (vv *ViewVersion) Delete(ctx context.Context, db DB) error {
	switch {
	case !vv._exists: // doesn't exist
		return nil
	case vv._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.view_version ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, vv.ID)
	if _, err := db.ExecContext(ctx, sqlstr, vv.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	vv._deleted = true
	return nil
}

// ViewVersionByID retrieves a row from 'public.view_version' as a [ViewVersion].
//
// Generated from index 'view_version_pkey'.
func ViewVersionByID(ctx context.Context, db DB, id string) (*ViewVersion, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, viewid, versionnumber, reason, status, statusdate ` +
		`FROM public.view_version ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	vv := ViewVersion{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&vv.ID, &vv.Viewid, &vv.Versionnumber, &vv.Reason, &vv.Status, &vv.Statusdate); err != nil {
		return nil, logerror(err)
	}
	return &vv, nil
}

// ViewVersionByViewid retrieves a row from 'public.view_version' as a [ViewVersion].
//
// Generated from index 'view_version_viewid_idx'.
func ViewVersionByViewid(ctx context.Context, db DB, viewid sql.NullString) ([]*ViewVersion, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, viewid, versionnumber, reason, status, statusdate ` +
		`FROM public.view_version ` +
		`WHERE viewid = $1`
	// run
	logf(sqlstr, viewid)
	rows, err := db.QueryContext(ctx, sqlstr, viewid)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*ViewVersion
	for rows.Next() {
		vv := ViewVersion{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&vv.ID, &vv.Viewid, &vv.Versionnumber, &vv.Reason, &vv.Status, &vv.Statusdate); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &vv)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// View returns the View associated with the [ViewVersion]'s (Viewid).
//
// Generated from foreign key 'view_version_viewid_fkey'.
func (vv *ViewVersion) View(ctx context.Context, db DB) (*View, error) {
	return ViewByID(ctx, db, vv.Viewid.String)
}
